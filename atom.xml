<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>遙遠的理想乡</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-27T07:19:00.633Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>遙遠</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask框架</title>
    <link href="http://example.com/2023/11/27/python%20web%20Flask%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2023/11/27/python%20web%20Flask%E6%A1%86%E6%9E%B6/</id>
    <published>2023-11-27T07:02:55.978Z</published>
    <updated>2023-11-27T07:19:00.633Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-web-Flask框架"><a href="#python-web-Flask框架" class="headerlink" title="python web Flask框架"></a>python web Flask框架</h1><p><a href="https://blog.jetbrains.com/zh-hans/pycharm/2022/08/flask-tutorial/">Flask 教程：在 PyCharm 中创建 Flask 应用程序 | The PyCharm Blog (jetbrains.com)</a></p><p>*flask无法安装成功 出现Non-zero exit code(2）</p><p>解决方法：python -m pip install pip&#x3D;&#x3D;20.0.2 -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><h2 id="flask基础"><a href="#flask基础" class="headerlink" title="flask基础"></a>flask基础</h2><h3 id="搭建flask环境"><a href="#搭建flask环境" class="headerlink" title="搭建flask环境"></a>搭建flask环境</h3><h4 id="安装python隔离环境-virtualenv"><a href="#安装python隔离环境-virtualenv" class="headerlink" title="安装python隔离环境 virtualenv"></a>安装python隔离环境 virtualenv</h4><p>进入cmd  输入 <code>pip install virtualenv</code></p><p>创建 python虚拟环境</p><p><code>virtualenv  flask_env（环境名）</code>  （默认python解析器）</p><p><code>virtualenv –p Python解释器的路径 虚拟环境名</code>（指定python解析器）</p><p>进入虚拟环境  <code>.\ 环境名\Scripts\activate</code>    前面有（flask_env）表示当前进入虚拟环境，且环境名为flask_env</p><img src="C:\Users\29145\Desktop\屏幕截图 2023-09-22 210250.png" alt="屏幕截图 2023-09-22 210250" style="zoom:150%;" /><p>退出虚拟环境  <code>deacitivaet</code></p><p>将环境依赖的包记录到 requirements.txt  <code>pip freeze &gt; requirements.txt</code></p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230922211409400.png" alt="image-20230922211409400" style="zoom:150%;" /><p>在env_space目录下会自动生成requirements.txt文件</p><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230922211536237.png" alt="image-20230922211536237"></p><p>将requirements.txt 中记录的依赖包安装   <code>pip install -r requirements.txt</code></p><p>安装flask <code>pip install flask</code></p><h4 id="在pycharm中创建虚拟环境"><a href="#在pycharm中创建虚拟环境" class="headerlink" title="在pycharm中创建虚拟环境"></a>在pycharm中创建虚拟环境</h4><p>在界面中选择 创建新的project</p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230922214307749.png" alt="image-20230922214307749" style="zoom:50%;" /><p>在下面选择之前创建好的虚拟环境中的python解析器</p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230922214423761.png" alt="image-20230922214423761" style="zoom:50%;" /><p>创建好后terminal中前显示(flask_env) 创建的虚拟环境名 则为成功进入虚拟环境</p><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230922214707344.png" alt="image-20230922214707344"></p><h3 id="第一个flask程序"><a href="#第一个flask程序" class="headerlink" title="第一个flask程序"></a>第一个flask程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入Flask类</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 实例化Flask类</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 定义视图函数，并为该函数注册路由</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)   </span><span class="comment">#路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_flask</span>():  <span class="comment">#视图函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;p&gt;Hello, Flask!&lt;/p&gt;&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 启动开发服务器</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h4 id="程序的基本结构"><a href="#程序的基本结构" class="headerlink" title="程序的基本结构"></a>程序的基本结构</h4><p>Hello Flask程序包含3个比较重要的部分，分别是Flask类、开发服务器、路由与视图。</p><p><strong>flask类</strong> </p><p>该类中封装了很多与Flask程序相关的方法，所有的Flask程序中必须要创建一个Flask类的对象</p><p>创建类对象  </p><p> <code>app = Flask(__name__)</code></p><p>必选参数</p><p>__name__：__name__是Flask中一个特殊的变量，用于保存程序主模块或者包的名称</p><p>可选参数</p><p>static_folder：用于指定存放静态文件的文件夹名称，默认值为static。</p><p>static_url_path：用于指定前端访问静态文件的路径，默认值为static_folder的名称。</p><p>template_folder：用于指定存放模板文件的文件夹名称，默认为应用程序根路径下的templates文件夹</p><p><strong>开发服务器</strong></p><p><code>app.run()</code></p><p>host：运行当前程序的主机名称，默认值为’127.0.0.1’或’localhost’。</p><p>port：运行当前程序的主机对应的端口号，默认值为5000。</p><p>debug：是否启用调试模式，默认值为False。</p><h3 id="flask-配置信息"><a href="#flask-配置信息" class="headerlink" title="flask 配置信息"></a>flask 配置信息</h3><h3 id="flask-扩展包"><a href="#flask-扩展包" class="headerlink" title="flask 扩展包"></a>flask 扩展包</h3><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="路由的创建"><a href="#路由的创建" class="headerlink" title="路由的创建"></a>路由的创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@appp.route(<span class="params"><span class="string">&quot; / &quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_new</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">app.add_url_rule(rule=<span class="string">&#x27;/&#x27;</span>,view_func=index_new )</span><br><span class="line"><span class="comment">#rule 必选参数表示url</span></span><br><span class="line"><span class="comment">#view_func 可选参数 表示相关联的视图函数名</span></span><br></pre></td></tr></table></figure><h3 id="url传递参数"><a href="#url传递参数" class="headerlink" title="url传递参数"></a>url传递参数</h3><h4 id="参数传递的方式"><a href="#参数传递的方式" class="headerlink" title="参数传递的方式"></a>参数传递的方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@appp.route(<span class="params"><span class="string">&quot;/&lt;参数名&gt; &quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">参数名</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h4 id="转换器-限定参数类型"><a href="#转换器-限定参数类型" class="headerlink" title="转换器(限定参数类型)"></a>转换器(限定参数类型)</h4><h5 id="内置转换器"><a href="#内置转换器" class="headerlink" title="内置转换器"></a>内置转换器</h5><p> &lt;类型 : 参数名&gt;   转换器不写类型默认为string</p><p>string</p><p>int</p><p>float</p><p>any   匹配给定的一系列值中的某一个元素</p><p>path 与string类似匹配非空字符串,允许包含’&#x2F;‘</p><p>uuid</p><h5 id="自定义转换器"><a href="#自定义转换器" class="headerlink" title="自定义转换器"></a>自定义转换器</h5><p>form werkzeug.routing import BaseConverter 导包</p><p>class 类名(BaseConverter):  自定义规则</p><p>regx 正则表达式匹配规则</p><p>to_python()方法: 用于将url中的参数的类型转换为视图函数中的类型</p><p>to_url()方法: 用于将python数据类型转换为url中使用的字符串类型</p><p>app.url_map.converters[“自定义转换器名称”]&#x3D;自定义转换器类名 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">自定义参数类型(自定义转换器)</span><br><span class="line"></span><br><span class="line">- 背景:</span><br><span class="line">  - 如果系统提供的<span class="built_in">int</span>,<span class="built_in">float</span>,等参数类型满足不了需求的时候,我们需要自定义</span><br><span class="line">  - 之所以,<span class="built_in">int</span>,<span class="built_in">float</span>,path可以接收不同的数据类型,是因为,系统已经提供好对应的转换器了</span><br><span class="line">- 自定义转换器格式</span><br><span class="line">  - <span class="number">1.</span>定义类,继承自BaseConverter</span><br><span class="line">  - <span class="number">2.</span>重写init方法</span><br><span class="line">  - <span class="number">3.</span>初始化父类成员变量, 还有子类自己的规则</span><br><span class="line">  - <span class="number">4.</span>将转换器类,添加到系统默认的转换器列表中</span><br><span class="line"></span><br><span class="line">  需求: 接收三位整数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 1.定义类,继承自BaseConverter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRegexConverter</span>(<span class="title class_ inherited__">BaseConverter</span>):</span><br><span class="line">    <span class="comment">#这样直接指定规则,不够灵活,具体应该匹配什么规则应该交给路由</span></span><br><span class="line">    <span class="comment"># regex = &quot;\d&#123;3&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># - 2.重写init方法,接收两个参数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,<span class="built_in">map</span>,regex</span>):</span><br><span class="line">        <span class="comment"># - 3.初始化父类成员变量, 还有子类自己的规则</span></span><br><span class="line">        <span class="built_in">super</span>(MyRegexConverter, self).__init__(<span class="built_in">map</span>)</span><br><span class="line">        self.regex = regex</span><br><span class="line"></span><br><span class="line"><span class="comment"># - 4.将转换器类,添加到系统默认的转换器列表中</span></span><br><span class="line">app.url_map.converters[<span class="string">&quot;re&quot;</span>] = MyRegexConverter</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印输出所有的系统转换器列表</span></span><br><span class="line"><span class="built_in">print</span>(app.url_map.converters)</span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配三位整数</span></span><br><span class="line"><span class="comment">#使用re(&#x27;规则&#x27;),实际上是传递了两个参数,参数1: app.url_map,  参数2:括号中写的正则规则</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;re(&quot;\d&#123;3&#125;&quot;):number&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">number</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;the three number is %s&quot;</span>%number</span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配四位整数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;re(&quot;\d&#123;4&#125;&quot;):number&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_four_number</span>(<span class="params">number</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;the four number is %s&quot;</span>%number</span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配一个手机号</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;re(&quot;1[3-9]\d&#123;9&#125;&quot;):phone&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_phone_number</span>(<span class="params">phone</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;the phone number is %s&quot;</span>%phone</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> Flask URL默认转换器、自定义转换器、to_python、to_url_flask 转码_海洋的渔夫的博客-CSDN博客(<a href="https://blog.csdn.net/u012887259/article/details/103070911/">https://blog.csdn.net/u012887259/article/details/103070911/</a>)</p><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><h4 id="请求的方式"><a href="#请求的方式" class="headerlink" title="请求的方式"></a>请求的方式</h4><p>get 从服务器中请求资源</p><p>post 向服务器提交表单或上传文件</p><p>put 更新数据</p><p>option 客户端查看服务器功能</p><p>flask对请求的处理流程:</p><p>接受请求 -&gt; 创建请求上下文 -&gt; 请求上下文入栈 -&gt; 创建该请求的应用上下文 -&gt; 应用上下文入栈   -&gt; 处理逻辑 -&gt; 请求上下文出战 -&gt; 应用上下文出栈</p><h4 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子"></a>请求钩子</h4><p>（判断用户身份的通用函数，避免视图函数重复写）</p><ul><li><strong>before_first_reques</strong>t   处理第一个请求前运行</li><li><strong>before_request</strong>  每次请求前运行</li><li><strong>after_request</strong>  处理逻辑没有异常，在每次请求后运行</li><li><strong>teardown_request</strong>  在每次请求后运行 不管异常</li><li><strong>teardown_appcontext</strong> 在应用上下文从栈中弹出之前与运行</li><li><strong>after_this_request</strong> 在视图函数内创建，在请求执行后，该函数接收响应对象为参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_request</span>():</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;这是请求钩子before_request注册的函数&quot;</span></span><br></pre></td></tr></table></figure><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><p>临时保存程序运行过程中一些信息</p><h5 id="请求上下文"><a href="#请求上下文" class="headerlink" title="请求上下文"></a>请求上下文</h5><p><strong>request</strong>：封装请求信息</p><table><thead><tr><th><strong>属性</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td>args</td><td align="center">获取URL中的请求参数</td></tr><tr><td>methods</td><td align="center">获取请求的HTTP方法</td></tr><tr><td>cookies</td><td align="center">获取包含Cookie名称和值的字典对象</td></tr><tr><td>data</td><td align="center">获取包含字符串形式的请求数据</td></tr><tr><td>form</td><td align="center">获取解析后的表单数据</td></tr><tr><td>values</td><td align="center">一个包含form和args全部内容的CombineMultiDict</td></tr><tr><td>headers</td><td align="center">获取首部字段</td></tr><tr><td>user_agent</td><td align="center">获取浏览器标识信息</td></tr></tbody></table><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>close()</td><td>关闭当前请求</td></tr><tr><td>get_data()</td><td>获取请求中的数据</td></tr><tr><td>get_json()</td><td>作为JSON解析并返回数据</td></tr><tr><td>make_form_data_parse()</td><td>创建表单数据解析器</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="comment">#通过request.args.get(&quot;key&quot;)来获取url中的参数 get/post请求都行</span></span><br><span class="line"><span class="comment">#通过request.form.get(&quot;key&quot;)来获取url中的参数 只能是post请求</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/get&#x27;</span>,methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user</span>():</span><br><span class="line">    method=request.method</span><br><span class="line">    args_id=request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    form_id=request.form.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;args获取：<span class="subst">&#123;args_id&#125;</span>    form获取：<span class="subst">&#123;form_id&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230924131515190.png" alt="image-20230924131515190"></p><p><a href="https://blog.csdn.net/weixin_44799217/article/details/126634900">flask框架中request请求用法详解_flask request_IT之一小佬的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/u011146423/article/details/88191225">Flask request 属性详解_flask.request_爱人BT的博客-CSDN博客</a></p><p><strong>session</strong>：记录请求会话中的用户信息</p><ul><li>当服务器收到浏览器发送的请求时，会检查浏览器中是否包含名称为session的Cookie信息，如果不存在，那么浏览器会认为当前请求是一个新会话，并生成一个名称为session的信息存储到浏览器的Cookie中。</li><li>浏览器在下一次请求服务器时，将携带Cookie中存储的session信息，此时服务器通过浏览器提交的session信息便可以辨别出当前请求属于哪个浏览器。</li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>get(key)</td><td>通过传入的key值，获取Cookie中对应的value值</td></tr><tr><td>pop(key)</td><td>通过传入的key值，删除Cookie中对应的value值</td></tr><tr><td>items()</td><td>将Cookie中的值以“key:value”形式返回</td></tr><tr><td>values()</td><td>获取Cookie中所有的value值</td></tr><tr><td>clear()</td><td>清空当前站点Cookie中的内容</td></tr><tr><td>keys()</td><td>获取Cookie中所有的key值</td></tr><tr><td>update()</td><td>接收一个字典，根据接收的字典更新或添加到Cookie中</td></tr></tbody></table><h5 id="应用上下文"><a href="#应用上下文" class="headerlink" title="应用上下文"></a>应用上下文</h5><p><strong>current_app对象</strong></p><p>表示当前激活的Flask应用程序实例</p><p><strong>g对象</strong></p><p>表示程序的一个全局临时变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, g</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>():</span><br><span class="line">    user_id = <span class="string">&#x27;001&#x27;</span>           <span class="comment"># 设置用户id</span></span><br><span class="line">    user_name = <span class="string">&#x27;flask&#x27;</span>    <span class="comment"># 设置用户名称</span></span><br><span class="line">    g.user_id = user_id      <span class="comment"># 将用户id保存到g对象中</span></span><br><span class="line">    g.user_name = user_name <span class="comment"># 将用户名称保存到g对象中</span></span><br><span class="line">    result = db_query()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;result&#125;</span>&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_query</span>():</span><br><span class="line">    user_id = g.user_id    <span class="comment"># 使用g对象获取用户id</span></span><br><span class="line">    user_name = g.user_name  <span class="comment"># 使用g对象获取用户名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;user_id&#125;</span>:<span class="subst">&#123;user_name&#125;</span>&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="处理响应"><a href="#处理响应" class="headerlink" title="处理响应"></a>处理响应</h3><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p>​浏览器发出的请求会触发相应的视图函数，并将视图函数的返回值作为响应体，之后生成完整的响应内容，即响应报文。响应报文主要由4个部分组成，分别是状态行、响应报头、空行以及响应体。</p><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230924110912411.png" alt="image-20230924110912411"></p><p>​状态码由三位数字组成，其中第1位数字表示响应的类别，它的取值为1~5</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>100~199</td><td>表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个处理过程</td></tr><tr><td>200~299</td><td>表示服务器成功接收请求并已完成整个处理过程，常用的状态码为200，表示请求成功</td></tr><tr><td>300~399</td><td>为完成请求，客户需进一步细化请求。例如，请求的资源已经移动到一个新地址，常用状态码包括302（表示所请求的页面已经临时转移至新的URL）、307和304（表示使用缓存资源）</td></tr><tr><td>400~499</td><td>客户端的请求有错误，常用状态码包括404（表示服务器无法找到被请求的页面）和403（表示服务器拒绝访问，权限不够）</td></tr><tr><td>500~599</td><td>服务器端出现错误，常用状态码为500，表示请求未完成，服务器遇到不可预知的情况</td></tr></tbody></table><h4 id="生成响应"><a href="#生成响应" class="headerlink" title="生成响应"></a>生成响应</h4><p>​Flask内部自动会该字符串转换成Response类的对象。在Flask中，Response类表示响应，它封装了响应报文的相关信息。如果希望在Flask程序中主动生成响应，一般可以通过Response类的构造方法或make_response()函数实现。</p><p><strong>Response类</strong></p><p><code>Response(response, status, headers, mimetype, content_type, direct_passthrough)</code></p><ul><li>response：可选参数，表示视图函数返回的响应体。</li><li>status：可选参数，表示响应状态码。</li><li>headers：可选参数，表示响应报头。</li><li>mimetype：可选参数，表示响应体的MIME类型。</li><li>content_type：可选参数，表示响应体的类型。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># 使用Response类的构造方法生成响应对象，设置状态码为201，响应类型为text/html</span></span><br><span class="line">    resp = Response(response=<span class="string">&#x27;Python&amp;Flask&#x27;</span>,status=<span class="number">201</span>,</span><br><span class="line">                                 content_type=<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>make_response()函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    res = make_response(<span class="string">&#x27;Python&amp;Flask&#x27;</span>,<span class="number">201</span>,</span><br><span class="line">                            &#123;<span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27; text/html;charset=utf-8&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>make_response() 生成json类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response, jsonify</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/response&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resp</span>():</span><br><span class="line">    res = make_response(jsonify(&#123;<span class="string">&#x27;Python&#x27;</span>:<span class="string">&#x27;Flask&#x27;</span>&#125;),<span class="number">202</span>)</span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="URL反向解析"><a href="#URL反向解析" class="headerlink" title="URL反向解析"></a>URL反向解析</h3><p>flask.url_for模块中提供了URL反向解析的函数url_for()，该函数可以根据视图函数的名称获取对应的URL。</p><p><code>url_for(endpoint, values,_external,_scheme,_anchor,_method,**values)</code></p><ul><li>endpoint：必选参数，表示反向解析的端点（用于标记一个视图函数以及对应的URL规则）名称，默认值为视图函数名。</li><li>values：可选参数，表示URL地址传递的参数。</li><li>_external：可选参数，表示是否供程序外部使用，默认值为False，若为True，则返回绝对URL地址，例如，<a href="http://127.0.0.1:5000/hello/flask%E3%80%82">http://127.0.0.1:5000/hello/flask。</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/flask&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;url_for(<span class="string">&#x27;greet&#x27;</span>)&#125;</span>&quot;</span>   <span class="comment"># 反向解析视图函数greet()对应的URL </span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230924122922761.png" alt="image-20230924122922761"></p><p>若URL规则中包含要传递的参数，则调用url_for()函数时需要将该参数以关键字参数形式传递。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;url_for(<span class="string">&#x27;greet&#x27;</span>,name=name)&#125;</span>&quot;</span>   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230924123159632.png" alt="image-20230924123159632"></p><p>使用url_for()函数反向解析URL时，除了传递URL规则中的参数以外，还可以传递任何额外参数给URL地址的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello_1/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 将age=20添加到URL地址中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;url_for(<span class="string">&#x27;greet&#x27;</span>,name=name, age=<span class="number">20</span>)&#125;</span>&quot;</span>  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230924123422113.png" alt="image-20230924123422113"></p><h3 id="页面重定向"><a href="#页面重定向" class="headerlink" title="页面重定向"></a>页面重定向</h3><p>在Flask程序中，页面重定向功能可以通过redirect()函数实现。</p><p><code>redirect(location, code=302, Response=None)</code></p><ul><li>location：必选参数，表示重定向的URL地址。</li><li>code：可选参数，表示重定向状态码，默认状态码为302。</li><li>Response：可选参数，表示实例化响应时使用的Response类，若未指定默认使用的响应类为werkzeug.wrappers.Response。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,request,redirect,url_for</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line">app.secret_key=<span class="string">&#x27;your_secret_ke&amp;^52@!&#x27;</span> <span class="comment">#设置secret_key的值</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;你好<span class="subst">&#123;session.get(<span class="string">&quot;username&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(login))         <span class="comment"># 页面重定向到登录页面</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>]=request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(index))       <span class="comment"># 页面重定向到index页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">        &lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=text name=username&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;input type=submit value=&#x27;登录&#x27;&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>补充：abort()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,abort</span><br><span class="line">....</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abort_1</span>():</span><br><span class="line"><span class="keyword">return</span> abort(<span class="number">404</span>)   <span class="comment">#页面返回状态码404</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="创建-渲染模板"><a href="#创建-渲染模板" class="headerlink" title="创建&#x2F;渲染模板"></a>创建&#x2F;渲染模板</h3><p>1.在根目录下创建templates文件夹</p><p>2.创建html文件(创建模板就是创建html文件)</p><p>3.创建flask程序导入render_template()函数</p><p>4.在视图函数中渲染模板</p><p><strong>render_template() 函数</strong></p><p><code>render_template(&quot;template_name_or_list,**context&quot;)</code></p><ul><li><strong>template_name_or_list</strong> 必选参数,表示要加载的模板名称</li><li><strong>context</strong>   可选参数表示像模板文件传递的参数,以关键字参数传递</li></ul><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230924135545320.png" alt="image-20230924135545320"></p><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230924135523838.png" alt="image-20230924135523838"></p><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230924135553796.png" alt="image-20230924135553796"></p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**&#123;&#123; 变量名 &#125;&#125;！**</span><br></pre></td></tr></table></figure><p>jinja2能是识别所有类型的变量，如：字符串、列表、字典，它们会被替换为同名的 Python 变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)  <span class="comment">#flask实例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/2&#x27;</span></span>)     </span><span class="comment">#创建路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():  <span class="comment">#视图函数</span></span><br><span class="line">    string = <span class="string">&#x27;www.imooc.com&#x27;</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;www&#x27;</span>, <span class="number">123</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;poloyy&quot;</span>&#125;]</span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,string=string, <span class="built_in">list</span>=<span class="built_in">list</span>, <span class="built_in">dict</span>=<span class="built_in">dict</span>) </span><br><span class="line"><span class="comment">#前面的name对应模板变量的名称，后面为视图定义的变量name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">&#123;&#123; string &#125;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123; list[0] &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123; list[1] &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123; list[2] &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123; list[3] &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123; dict[&#x27;name&#x27;] &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> &#123;&#123; dict[&#x27;age&#x27;] &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230924143227385.png" alt="image-20230924143227385"></p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>变量的值可以使用过滤器修改。过滤器添加在变量名之后，二者之间以竖线分隔,一个模板可以使用多个过滤器，多个之间用竖线（” | “）隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;变量名|filter(parameter)&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>内置过滤器</strong></p><table><thead><tr><th><strong>过滤器</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>abs()</td><td>返回给定参数的绝对值</td></tr><tr><td>random()</td><td>返回给定列表中的一个随机元素</td></tr><tr><td>safe()</td><td>将变量值标记为安全，保证渲染时不进行转义</td></tr><tr><td>tojson()</td><td>将给定参数序列化为JSON字符串</td></tr><tr><td>escape()</td><td>用HTML安全序列替换字符串中的字符&amp;、&lt;、&gt;、’和”</td></tr><tr><td>length()</td><td>返回变量值的长度</td></tr><tr><td>sort()</td><td>对变量保存的数据进行排序，该函数内部调用的是Python的sorted()函数</td></tr></tbody></table><table><thead><tr><th><strong>过滤器</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>join()</td><td>使用指定符号将字符串中的字符进行拼接，默认符号为空字符串</td></tr><tr><td>int()</td><td>将值转换为整数，如果转换不起作用，返回0</td></tr><tr><td>float()</td><td>将值转换为浮点数，如果转换不起作用，返回0.0</td></tr><tr><td>capitalize()</td><td>将变量值的首字母改为大写字母，其余字母改为小写字母</td></tr><tr><td>trim()</td><td>清除变量值前后的空格</td></tr><tr><td>upper()</td><td>将变量值转换为大写字母</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/filters&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_of_filters</span>():</span><br><span class="line">    num = -<span class="number">2.3</span></span><br><span class="line">    li = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line">    string = <span class="string">&#x27;flask&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;filters.html&#x27;</span>, num=num, li=li, string=string)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;#返回变量num的绝对值#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>绝对值：&#123;&#123; num|abs &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    &#123;#将变量num转换为整型#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>转换为整型：&#123;&#123; num|int &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    &#123;#返回变量li中随机的一个元素#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>获取随机元素：&#123;&#123; li|random &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    &#123;#返回变量li的长度#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>获取列表长度：&#123;&#123; li|length &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230925083452546.png" alt="image-20230925083452546"></p><p><strong>自定义过滤器</strong></p><p>通过@app.template_filter()将自定义的函数添加到注册到过滤器列表中，可选参数name表示过滤器名称，默认为被装饰的函数名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxxx</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.template_filter()          </span><span class="comment"># 注册自定义过滤器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_filters</span>(<span class="params">data</span>):        <span class="comment"># 自定义过滤器</span></span><br><span class="line">    <span class="keyword">return</span> data[::-<span class="number">1</span>]           <span class="comment">#反转列表元素</span></span><br></pre></td></tr></table></figure><h4 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">选择结构语句必须由&#123;%endif%&#125;结尾</span><br><span class="line"></span><br><span class="line">&#123;% if 条件语句1 %&#125;</span><br><span class="line">  语句1</span><br><span class="line">&#123;% elif 条件语句2 %&#125;</span><br><span class="line">  语句2</span><br><span class="line">……</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">语句n</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/query-score/&lt;int:score&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_score</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;select_struct.html&#x27;</span>,score=score)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% if score &gt;= 85 %&#125;</span><br><span class="line">    优秀</span><br><span class="line">&#123;% elif 75 &lt;= score &lt; 85 %&#125;</span><br><span class="line">    良好</span><br><span class="line">&#123;% elif 60 &lt;= score &lt; 75 %&#125;</span><br><span class="line">    中等</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    差</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230925083819721.png" alt="image-20230925083819721"></p><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><p>其中for标识循环结构的起始位置，endfor标识循环结构的结束位置，且两者都不能省略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for 临时变量 in 变量 %&#125;</span><br><span class="line">    语句</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/goods&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">goods</span>():</span><br><span class="line">    goods_name = [<span class="string">&#x27;洗碗机&#x27;</span>,<span class="string">&#x27;电饭锅&#x27;</span>,<span class="string">&#x27;电烤箱&#x27;</span>,<span class="string">&#x27;电磁灶&#x27;</span>,<span class="string">&#x27;微波炉&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;loop_struct.html&#x27;</span>, goods_name=goods_name)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% for good in goods_name %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; good &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--不换行输出列表--&gt;</span></span><br><span class="line">    &#123;% for good in lst %&#125;</span><br><span class="line">        &#123;&#123; good &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230925084042505.png" alt="image-20230925084042505"></p><p><strong>循环结构的特殊变量</strong></p><table><thead><tr><th><strong>变量</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>loop.index</td><td>当前循环的迭代数（从1开始计数）</td></tr><tr><td>loop.index0</td><td>当前循环的迭代数（从0开始计数）</td></tr><tr><td>loop.revindex</td><td>当前反向循环的迭代数（从1开始计数）</td></tr><tr><td>loop.revindex0</td><td>当前反向循环的迭代数（从0开始计数）</td></tr><tr><td>loop.first</td><td>若当前循环为第一次循环，则返回True</td></tr><tr><td>loop.last</td><td>若当前循环为最后一次循环，则返回True</td></tr><tr><td>loop.length</td><td>当前序列包含的元素数量</td></tr><tr><td>loop.previtem</td><td>上一个迭代的数据</td></tr><tr><td>loop.nextitem</td><td>下一个迭代的数据</td></tr></tbody></table><h3 id="宏的定义与调用"><a href="#宏的定义与调用" class="headerlink" title="宏的定义与调用"></a>宏的定义与调用</h3><p>宏将模板中的重复代码进行封装，需要时调用宏</p><h4 id="宏的定义"><a href="#宏的定义" class="headerlink" title="宏的定义"></a>宏的定义</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro 宏的名称（参数列表） %&#125;</span><br><span class="line">宏内部的逻辑代码</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>在macro.html文件的<body>标签中，定义一个描述input控件类型的宏。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro inputstyle(name, value=&#x27;&#x27;, type=&#x27;checkbox&#x27;) %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;&#123;&#123; name &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; value &#125;&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&#123;&#123; type &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="宏的调用"><a href="#宏的调用" class="headerlink" title="宏的调用"></a>宏的调用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 宏的名称（参数列表）&#125;&#125; </span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>您目前对哪些技术感兴趣？<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;Python&#x27;) &#125;&#125; Python<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;Java&#x27;) &#125;&#125; Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;big_data&#x27;) &#125;&#125; 大数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;JavaScript&#x27;) &#125;&#125; JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;commit&#x27;, value=&quot;提交&quot;, type=&quot;button&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/macro&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_style</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;macro.html&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230925084929598.png" alt="image-20230925084929598"></p><p>在多个模板中定义宏，将宏写入单独文件，再导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;%import &#x27;宏文件的路径&#x27; [ as 宏的别名 ]%&#125;</span><br><span class="line">&#123;%from &#x27;宏文件的路径&#x27; import 宏的名称 [ as 宏的别名 ]%&#125;</span><br><span class="line">例：</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% from &#x27;macro.html&#x27; import inputstyle %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>导入宏<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; inputstyle(&#x27;Python&#x27;) &#125;&#125; Python<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230925085046110.png" alt="image-20230925085046110"></p><h3 id="消息闪现"><a href="#消息闪现" class="headerlink" title="消息闪现"></a>消息闪现</h3><p>​用户反馈信息的方式——消息闪现，消息闪现会在请求完成后记录一条消息，之后在下一次请求向用户提示这条消息。例如，用户在登录页面输入错误的密码后，单击登录按钮才会在页面提示密码错误的消息。</p><p><strong>flash() 函数</strong></p><p>​flash()函数执行后不会立即在浏览器页面中为用户弹出一条消息，而是需要在模板中通过get_flashed_messages()函数获取消息，并将其显示到页面中。</p><p>​flash()函数会将发送的消息存储到session中，因此我们需要在程序中设置secret_key。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash(message, category=<span class="string">&#x27;message&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>message：必选参数，发送闪现的消息。</li><li>category：可选参数，消息的类别。该参数支持4种取值，分别是message、error、info和warning，其中message是默认值，表示任何类型的消息；error表示错误的消息；info表示信息消息；warning表示警告消息。</li></ul><p><strong>get_flashed_messages() 函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_flashed_messages(with_categories=<span class="literal">False</span> , category_filter=())</span><br></pre></td></tr></table></figure><ul><li>with_categories：可选参数，表示是否同时返回消息与消息类别，若设置为True，则会以元组形式返回消息和消息类别；若设置为False，则只会返回消息。</li><li>category_filter：可选参数，表示只返回与消息类别一致的消息。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> flash, redirect, session, request, url_for</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;Your_secret_key&amp;^52@!&#x27;</span> <span class="comment"># 设置secret_key</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home_page</span>():</span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    <span class="comment"># 判断session是否存储username的数据,存在响应页面，不存在重定向login页面</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="comment">#渲染模板，将username传入到模板变量</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;home_page.html&#x27;</span>, username=username) </span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))      <span class="comment"># 重定向到login页面</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:            </span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> \</span><br><span class="line">                request.form[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            flash(<span class="string">&#x27;用户名或密码错误&#x27;</span>, category=<span class="string">&#x27;error&#x27;</span>)  <span class="comment">#密码错误通过消息闪现反馈给用户</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">            session[<span class="string">&#x27;password&#x27;</span>] = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">            flash(<span class="string">&#x27;恭喜您，登录成功&#x27;</span>, category=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;home_page&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">home_page</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--调用get_flashed_messages()函数获取了类别为info的消息，并使用for..in.. 遍历每条消息--&gt;</span></span><br><span class="line">    &#123;% for message in get_flashed_messages(category_filter = (&#x27;info&#x27;)) %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎用户：&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">login</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;% for message in get_flashed_messages(category_filter = (&#x27;error&#x27;)) %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="静态文件加载"><a href="#静态文件加载" class="headerlink" title="静态文件加载"></a>静态文件加载</h3><p>​默认情况下静态文件都存储在与项目文件同级目录的static文件夹中，该文件夹需要由开发人员创建。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--、解析图片文件flask.png的URL规则为/static/test.png--&gt;</span></span><br><span class="line">url_for(&#x27;static&#x27;,filename=&#x27;test.png &#x27;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;test.png&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加载图片文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>加载图片<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;test.jpg&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/static-file&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_staticfile</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;base.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>加载css文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;Italics.css&#x27;) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板的继承"><a href="#模板的继承" class="headerlink" title="模板的继承"></a>模板的继承</h3><p>​网页中的通用内容和样式，可以通过模板继承实现，包含通用内容和样式的模板称为基模板，继承基模板的模板称为子模板。</p><p>​模板继承通过block和extends实现，其中block用于标识与继承机制相关的代码块，extends用于指定子模板所继承的基模板。子模板通过继承可以获取基模板中的内容和结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends 基模板名称 %&#125;  <span class="comment">&lt;!--&#123;% extends %&#125;必须位于子模板的第一行--&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230926103758121.png" alt="image-20230926103758121"></p><p>如果想要在子模板中仍然呈现基模板中的内容，那么可以使用super()函数实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是子模板<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; super() &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="表单与类视图"><a href="#表单与类视图" class="headerlink" title="表单与类视图"></a>表单与类视图</h2><h3 id="通过Flask-WTF处理表单"><a href="#通过Flask-WTF处理表单" class="headerlink" title="通过Flask-WTF处理表单"></a>通过Flask-WTF处理表单</h3><p>​Flask-WTF的表单其实是一个继承FlaskForm的类，表单类中可以根据需要包含若干个属性，每个属性的值又是一个表单字段类的对象，不同字段类的对象会映射为表单中的不同控件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-wtf   #安装flask-wtf</span><br></pre></td></tr></table></figure><h4 id="使用flask-wtf创建表单"><a href="#使用flask-wtf创建表单" class="headerlink" title="使用flask-wtf创建表单"></a>使用flask-wtf创建表单</h4><p>WTForms库的Field类派生了许多表单字段类，常用字段类与表单控件的映射关系。</p><table><thead><tr><th><strong>字段类</strong></th><th><strong>表单控件</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>RadioField</td><td><input  type="radio"></td><td>一组单选按钮</td></tr><tr><td>SelectField</td><td><select><option></option></select></td><td>下拉列表</td></tr><tr><td>SubmitField</td><td><input  type="submit"></td><td>提交按钮</td></tr><tr><td>StringField</td><td><input  type="text"></td><td>文本字段</td></tr><tr><td>PasswordField</td><td><input  type="password"></td><td>密码文本字段</td></tr><tr><td>TextAreaField</td><td>&lt; textarea&gt; </textarea></td><td>多行文本字段</td></tr><tr><td>HiddenField</td><td><input  type="hidden"></td><td>隐藏文本字段</td></tr></tbody></table><p>​常用的字段类都继承自WTForms库的Field类，所以我们可以通过Field类的构造方法实例化所有字段类，虽然有的字段类内部已经重写了Filed类的构造方法，但这些字段类的构造方法中会包含一些相同的参数。</p><p>​参数render_kw的值是一个字典，用于为表单控件设置一些属性，包括提示信息（placeholder）、高度（height）、宽度（width ）、是否获得焦点（autofocus ）等</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>label</td><td>字段标签<label>的值，即显示在输入控件旁的说明性文字</td></tr><tr><td>render_kw</td><td>字典类型，用于设置控件的属性</td></tr><tr><td>validators</td><td>列表类型，包含一系列的验证器，在提交表单数据时，会被列表中的验证器逐一验证</td></tr><tr><td>default</td><td>字符串或可调用对象，为表单字段设置默认值</td></tr></tbody></table><p>​参数validators的值是一个列表，该列表中包含了一系列用于验证表单数据是否有效的验证器，只有当表单数据满足验证器的规则时，填写的表单数据才能成功提交到服务器。</p><p>​在WTForms库中，验证器是一些用于字段数据的Python类，这些类都封装在wtforms.validators模块中，因此我们在使用验证器之前需要先从wtforms.validators模块中导入相应的类。</p><table><thead><tr><th><strong>验证器</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>DataRequired(message&#x3D;None)</td><td>验证数据是否有效，空字符串是为无效数据</td></tr><tr><td>Email(message&#x3D;None)</td><td>验证数据是否为电子邮件地址</td></tr><tr><td>EqualTo(fieldname,message&#x3D;None)</td><td>验证两个字段值是否相同</td></tr><tr><td>IPAddress(ipv4&#x3D;True,  ipv6&#x3D;False, message&#x3D;None)</td><td>验证数据是否为有效IP地址</td></tr><tr><td>Length(min&#x3D;-1,max&#x3D;-1,message&#x3D;None)</td><td>验证输入值的长度是否在给定的范围内</td></tr><tr><td>NumberRange(min&#x3D;None,max&#x3D;None,message&#x3D;None)</td><td>验证输入的数字是否在给定的范围内</td></tr></tbody></table><table><thead><tr><th><strong>验证器</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Optional(strip_whitespace&#x3D;True)</td><td>无输入值时跳过其他验证</td></tr><tr><td>Regexp(regex,flags&#x3D;0,message&#x3D;None)</td><td>使用正则表达式验证输入值</td></tr><tr><td>URL(require_tld&#x3D;True,message&#x3D;None)</td><td>验证URL</td></tr><tr><td>AnyOf(values, message&#x3D;None,  values_formatter&#x3D;None)</td><td>确保输入值在可选值列表中</td></tr><tr><td>NoneOf(values, message&#x3D;None,  values_formatter&#x3D;None)</td><td>确保输入值不在可选值列表中</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField,PasswordField,SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired,Length,EqualTo</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)  <span class="comment">#flask实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义了表单类，包含四个属性，username，password，password2，submit，对应的值为StringField，PasswordField，SubmitField的类对象，通过validators参数指定验证器，用于限制输入框的输入内容。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegisterForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    username=StringField(label=<span class="string">&#x27;用户名：&#x27;</span>,</span><br><span class="line">                         validators=[DataRequired(message=<span class="string">&#x27;用户名不能为空&#x27;</span>),</span><br><span class="line">                                     Length(<span class="number">3</span>,<span class="number">15</span>,message=<span class="string">&#x27;长度应该为3~15个字符 &#x27;</span>)])</span><br><span class="line">    password=PasswordField(<span class="string">&#x27;密码：&#x27;</span>,</span><br><span class="line">                           validators=[DataRequired(message=<span class="string">&#x27;用户名不能为空&#x27;</span>)])</span><br><span class="line">    password2=PasswordField(<span class="string">&#x27;确认密码&#x27;</span>,</span><br><span class="line">                            validators=[DataRequired(message=<span class="string">&#x27;用户名不能为空&#x27;</span>),</span><br><span class="line">                                        EqualTo(<span class="string">&#x27;password&#x27;</span>,message=<span class="string">&#x27;两次密码不一致&#x27;</span>)])</span><br><span class="line">    submit=SubmitField(<span class="string">&#x27;注册&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)     </span><span class="comment">#创建路由</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first_flask</span>():  <span class="comment">#视图函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello flask&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h4 id="在模板中渲染表单"><a href="#在模板中渲染表单" class="headerlink" title="在模板中渲染表单"></a>在模板中渲染表单</h4><p>​首先需要在视图函数中将表单类的对象传递到模板文件中，然后在模板文件中获取表单字段，将表单字段渲染到HTML页面进行呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.secret_key = <span class="string">&#x27;34sdfji9453#$@&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register_wtf.html&#x27;</span>, form=form)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form.username.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span> &#123;#获取username对应的标签名称#&#125;</span><br><span class="line">        &#123;&#123; form.username &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span>  &#123;#调用表单字段渲染为HTML#&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form.password.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; form.password2.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password2 &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; form.submit &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用flask-wtf验证表单"><a href="#使用flask-wtf验证表单" class="headerlink" title="使用flask_wtf验证表单"></a>使用flask_wtf验证表单</h4><h3 id="类视图"><a href="#类视图" class="headerlink" title="类视图"></a>类视图</h3><h5 id="标准类视图"><a href="#标准类视图" class="headerlink" title="标准类视图"></a>标准类视图</h5><p>​标准类视图是继承flask.views模块中基类View的子类，该子类中必须重写View类中的dispatch_request()方法。除dispatch_request()方法外，我们也可以根据需要向View子类中添加其他方法或属性。</p><p>​add_url_rule()方法将类视图与URL进行映射，不过该方法的view_func参数不能直接传入类视图的名称，而是需要传入通过as_view()方法将类视图转换后的视图函数。</p><ul><li>lmethods属性：设置当前类视图可以处理的请求方式列表。</li><li>ldecorators属性：为类视图指定装饰器列表，该列表中可以放置一个或多个装饰器。</li><li>ldispatch_request()方法：用于实现处理不同HTTP请求的具体逻辑，该方法可以通过关键字参数接收URL传递的参数。</li><li>las_view()方法：用于将类转换为可与路由系统一起使用的实际视图函数。as_view()方法必须传入一个name参数，用于指定动态生成视图函数的名称，也可以根据需要传入一些位置参数和关键字参数，这些参数都会转发给类的构造方法，以创建类的实例，并调用类内部的dispatch_request()方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyView</span>(<span class="title class_ inherited__">View</span>):                                  <span class="comment"># 定义类视图</span></span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]                     <span class="comment"># 指定请求方式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch_request</span>(<span class="params">self, name</span>):         <span class="comment"># 重写dispatch_request()方法</span></span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;hello <span class="subst">&#123;name&#125;</span>&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 将类视图与URL规则进行映射</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span>, view_func=MyView.as_view(<span class="string">&#x27;myview&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="基于方法类试图"><a href="#基于方法类试图" class="headerlink" title="基于方法类试图"></a>基于方法类试图</h5><p>​基于方法的类视图需要继承flask.views模块中的MethodView类，而MethodView类继承View类，由于MethodView类中已经重写了dispatch_request()方法，所以定义基于请求方法的类视图时<em>不需要重写dispatch_request()方法</em></p><p>​在基于方法的类视图中,并非通过类属性methods来指定当前视图可以处理的请求方式，而是通过定义与请求方式同名的方法来处理不同的请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.views <span class="keyword">import</span> MethodView</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">MethodView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):                                       <span class="comment"># 处理GET请求</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):    <span class="comment"># 处理POST请求</span></span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)     <span class="comment"># 获取输入的用户名</span></span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)     <span class="comment"># 获取输入的密码</span></span><br><span class="line">        <span class="keyword">if</span> username ==<span class="string">&#x27;flask&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>: <span class="comment"># 判断用户名和密码是否为123</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;用户：<span class="subst">&#123;username&#125;</span>登录成功。&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;用户名或密码错误，请重新登录。&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/login&#x27;</span>, view_func=LoginView.as_view(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">username</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">password</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">登录</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h3><ul><li>将一个应用程序分解成一组子模块。这是大型应用程序的理想选择，即项目实例化一个应用实例，初始化一些扩展，以及注册一组蓝图。</li><li>以一个URL前缀或子域在应用程序中注册蓝图。URL前缀或子域的参数成为该蓝图中所有视图函数的通用视图参数（具有默认值）。</li><li>在一个应用程序中用不同的URL规则多次注册一个蓝图。</li><li>通过蓝图提供模板过滤器、静态文件、模板和其他实用程序。蓝图不必实现应用程序或视图的功能。</li><li>在初始化Flask 扩展时在应用程序中注册一个蓝图</li></ul><p><img src="C:\Users\29145\AppData\Roaming\Typora\typora-user-images\image-20230927090507216.png" alt="image-20230927090507216"></p><h5 id="创建蓝图"><a href="#创建蓝图" class="headerlink" title="创建蓝图"></a>创建蓝图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask.Blueprint(name, import_name, static_folder=<span class="literal">None</span>, static_url_path=<span class="literal">None</span>, template_folder=<span class="literal">None</span>, url_prefix=<span class="literal">None</span>, subdomain=<span class="literal">None</span>, url_defaults=<span class="literal">None</span>, root_path=<span class="literal">None</span>, cli_group=&lt;<span class="built_in">object</span> <span class="built_in">object</span>&gt;)</span><br></pre></td></tr></table></figure><ul><li>name：必选参数，表示蓝图的名称。</li><li>import_name：必选参数，表示蓝图包的名称，通常为__name__。</li><li>static_folder：可选参数，表示静态文件夹的路径。</li><li>static_url_path：可选参数，表示静态文件的URL。</li><li>template_folder：可选参数，表示模板文件夹路径。</li><li>url_prefix：可选参数，表示附加到所有蓝图URL的路径，用于与Flask应用程序的其他URL区分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"><span class="comment"># 创建蓝图</span></span><br><span class="line">user = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__) </span><br><span class="line"><span class="meta">@user.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)                  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user_login&#x27;</span></span><br><span class="line"><span class="meta">@user.route(<span class="params"><span class="string">&#x27;/register&#x27;</span></span>)                  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user_register&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"><span class="comment"># 创建蓝图</span></span><br><span class="line">admin = Blueprint(<span class="string">&#x27;admin&#x27;</span>, __name__) </span><br><span class="line"><span class="meta">@admin.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)               </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;admin_login&#x27;</span></span><br><span class="line"><span class="meta">@admin.route(<span class="params"><span class="string">&#x27;/add&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;admin_add&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="注册蓝图"><a href="#注册蓝图" class="headerlink" title="注册蓝图"></a>注册蓝图</h5><p>register_blueprint()方法用于将蓝图注册到Flask程序中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">register_blueprint(blueprint, url_prefix, subdomain, url_defaults,**options)</span><br></pre></td></tr></table></figure><ul><li>blueprint：必选参数，表示要注册的蓝图。</li><li>url_prefix：可选参数，表示附加到所有蓝图URL的路径，若在Blueprint类设置参url_prefix，则会被该参数值覆盖</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> admin <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> user</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.register_blueprint(admin, url_prefix=<span class="string">&#x27;/admin&#x27;</span>)  <span class="comment"># 将蓝图admin进行注册</span></span><br><span class="line">app.register_blueprint(user, url_prefix=<span class="string">&#x27;/user&#x27;</span>)        <span class="comment"># 将蓝图user进行注册</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python-web-Flask框架&quot;&gt;&lt;a href=&quot;#python-web-Flask框架&quot; class=&quot;headerlink&quot; title=&quot;python web Flask框架&quot;&gt;&lt;/a&gt;python web Flask框架&lt;/h1&gt;&lt;p&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/11/27/hello-world/"/>
    <id>http://example.com/2023/11/27/hello-world/</id>
    <published>2023-11-27T06:21:15.364Z</published>
    <updated>2023-11-27T07:14:21.477Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
